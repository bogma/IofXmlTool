<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="Configuration" type="ConfigurationType">
  </xs:element>
  <xs:complexType name="GeneralType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:string" name="name"/>
        <xs:attribute type="xs:short" name="year"/>
        <xs:attribute type="xs:int" name="numberOfPlannedEvents" use="required"/>
        <xs:attribute type="xs:int" name="numberOfValidEvents">
          <xs:annotation>
            <xs:documentation>How many events are considered as valid. (Default: numberOfPlannedEvents)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="xs:int" name="numberOfCountingEvents">
          <xs:annotation>
            <xs:documentation>How many events should be summed up to build the total result. The best results will be taken first. (Default: numberOfPlannedEvents)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="xs:string" name="calcRule"/>
        <xs:attribute type="xs:string" name="resultFileRegex">
          <xs:annotation>
            <xs:documentation>TODO: better docu</xs:documentation>
            <xs:documentation>Regex to find relevant result files.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="xs:boolean" name="recurseSubDirs">
          <xs:annotation>
            <xs:documentation>If 'true' search in sub directories for files also. (Default: 'false')</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="xs:string" name="includeStatus" default="" use="optional"/>
        <xs:attribute type="xs:string" name="eventTitle"/>
        <xs:attribute type="xs:string" name="showEvents"/>
        <xs:attribute type="xs:int" name="showCompetitors" use="optional">
          <xs:annotation>
            <xs:documentation>Number of competitors to be shown in result. Use it if you want to show i.e. only the first 3 competitors of each category.</xs:documentation>
            <xs:documentation>If 0 all competitors will be listed. (Default: 0).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="ParamType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:string" name="key" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="TaskType" mixed="true">
    <xs:sequence>
      <xs:element type="ParamType" name="Param" maxOccurs="unbounded" minOccurs="0">
        <xs:annotation>
          <xs:documentation>sumType: all ... sum up all points from competitors  sumType: cup ... sum up cup points from competitors</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute type="xs:string" name="name" use="required"/>
    <xs:attribute type="xs:int" name="sequence" use="optional" default="0">
      <xs:annotation>
        <xs:documentation>The sequence defines the order of execution of the tasks. (Default: 0)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="xs:boolean" name="active" use="required">
      <xs:annotation>
        <xs:documentation>The task will only be executed if active is 'true'. Use 'false' to disable the task.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PreProcessingType">
    <xs:sequence>
      <xs:element type="TaskType" name="Task" maxOccurs="unbounded" minOccurs="0">
        <xs:annotation>
          <xs:documentation>options for input file preprocessing</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PostProcessingType">
    <xs:sequence>
      <xs:element type="TaskType" name="Task" maxOccurs="unbounded" minOccurs="0">
        <xs:annotation>
          <xs:documentation>options for result postprocessing  dummy task needed to declare Tasks array</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MapType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:string" name="type" use="required">
          <xs:annotation>
            <xs:documentation>'Class' or 'Org'</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="xs:string" name="from" use="required"/>
        <xs:attribute type="xs:string" name="to" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="EventType" mixed="true">
    <xs:sequence>
      <xs:element type="MapType" name="map" maxOccurs="unbounded" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute type="xs:int" name="num" use="optional"/>
    <xs:attribute type="xs:string" name="date" use="optional"/>
    <xs:attribute type="xs:string" name="name" use="optional"/>
    <xs:attribute type="xs:string" name="fileName" use="optional"/>
    <xs:attribute type="xs:decimal" name="multiply" use="optional" default="1.0"/>
    <xs:attribute type="xs:string" name="calcRule" use="optional"/>
  </xs:complexType>
  <xs:complexType name="EventsType">
    <xs:sequence>
      <xs:element type="EventType" name="Event" maxOccurs="unbounded" minOccurs="0">
        <xs:annotation>
          <xs:documentation>set num to 0 if not needed</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ClassType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:string" name="name" use="required"/>
        <xs:attribute type="xs:int" name="id" use="required"/>
        <xs:attribute type="xs:string" name="shortName" use="optional"/>
        <xs:attribute type="xs:string" name="calcRule" use="optional"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="CombineType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:string" name="name" use="required">
          <xs:annotation>
            <xs:documentation>Name of the new virtual class.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="xs:string" name="classIds" use="required">
          <xs:annotation>
            <xs:documentation>Comma separated list of class ids to be combined to a new virtual class.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="xs:string" name="shortName" use="optional">
          <xs:annotation>
            <xs:documentation>Short name of the new virtual class.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:simpleType name="FilterType">
    <xs:annotation>
      <xs:documentation>
        Include ... includes all Classes listed
        Exclude ... excludes all Classes listed
        None    ... use all Classes in result file. Default.
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="Include" />
      <xs:enumeration value="Exclude" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="ClassesType">
    <xs:sequence>
      <xs:element type="ClassType" name="Class" maxOccurs="unbounded" minOccurs="0">
      </xs:element>
      <xs:element type="CombineType" name="Combine" maxOccurs="unbounded" minOccurs="0">
        <xs:annotation>
          <xs:documentation>list class ids (comma separated) to be combined to one virtual 'class'</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute type="FilterType" name="filter" default="None"/>
    <xs:attribute type="xs:string" name="presentationOrder"/>
  </xs:complexType>
  <xs:complexType name="OrganisationType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:string" name="name" use="required"/>
        <xs:attribute type="xs:int" name="id" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="OrganisationsType">
    <xs:sequence>
      <xs:element type="OrganisationType" name="Organisation" maxOccurs="unbounded" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            filter = Include ... includes all Organisations listed
            filter = Exclude ... excludes all Organisations listed
            any other filter ... use all Organisations in result file  if name is "" the name from result file will be used
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute type="FilterType" name="filter" default="None"/>
  </xs:complexType>
  <xs:complexType name="HtmlType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:boolean" name="active" use="required"/>
        <xs:attribute type="xs:string" name="fileName" use="required"/>
        <xs:attribute type="xs:boolean" name="cssInline"/>
        <xs:attribute type="xs:string" name="docTemplate" use="required"/>
        <xs:attribute type="xs:string" name="classTemplate" use="required"/>
        <xs:attribute type="xs:string" name="detailsTemplate" use="required"/>
        <xs:attribute type="xs:string" name="cssFile" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="PdfType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:boolean" name="active" use="required"/>
        <xs:attribute type="xs:string" name="fileName" use="required"/>
        <xs:attribute type="xs:string" name="pageOrientation"/>
        <xs:attribute type="xs:string" name="pageSize"/>
        <xs:attribute type="xs:int" name="marginLeft"/>
        <xs:attribute type="xs:int" name="marginTop"/>
        <xs:attribute type="xs:int" name="marginRight"/>
        <xs:attribute type="xs:int" name="marginBottom"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="JsonType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:boolean" name="active" use="required"/>
        <xs:attribute type="xs:string" name="fileName" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="OutputType">
    <xs:sequence>
      <xs:element type="HtmlType" name="Html" maxOccurs="1" minOccurs="1"/>
      <xs:element type="PdfType" name="Pdf" maxOccurs="1" minOccurs="0"/>
      <xs:element type="JsonType" name="Json" maxOccurs="1" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="NameType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:string" name="name" use="required"/>
        <xs:attribute type="xs:string" name="aliasFor" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="NamesType">
    <xs:sequence>
      <xs:element type="NameType" name="Name" maxOccurs="unbounded" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TranslationType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:string" name="key" use="required"/>
        <xs:attribute type="xs:string" name="translate" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="TranslationsType">
    <xs:sequence>
      <xs:element type="TranslationType" name="Translation" maxOccurs="unbounded" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ConfigurationType">
    <xs:sequence>
      <xs:element type="GeneralType" name="General">
        <xs:annotation>
          <xs:documentation>showEvents: All, OmitAllMissing, OmitTailMissing</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element type="PreProcessingType" name="PreProcessing"/>
      <xs:element type="PostProcessingType" name="PostProcessing"/>
      <xs:element type="EventsType" name="Events"/>
      <xs:element type="ClassesType" name="Classes"/>
      <xs:element type="OrganisationsType" name="Organisations"/>
      <xs:element type="OutputType" name="Output"/>
      <xs:element type="NamesType" name="Names"/>
      <xs:element type="TranslationsType" name="Translations"/>
    </xs:sequence>
    <xs:attribute type="xs:string" name="type" use="required">
      <xs:annotation>
        <xs:documentation>supported types: Team, Cup, Sum</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
</xs:schema>